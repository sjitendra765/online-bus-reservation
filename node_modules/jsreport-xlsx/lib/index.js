'use strict';

var _recipe = require('./recipe.js');

var _recipe2 = _interopRequireDefault(_recipe);

var _serialize = require('./serialize.js');

var _serialize2 = _interopRequireDefault(_serialize);

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _responseXlsx = require('./responseXlsx.js');

var _responseXlsx2 = _interopRequireDefault(_responseXlsx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FS = _bluebird2.default.promisifyAll(_fs2.default);
var defaultXlsxTemplate = void 0;

module.exports = function (reporter, definition) {
  // used by html-to-xlsx recipe
  reporter.xlsx = { responseXlsx: _responseXlsx2.default };

  reporter.extensionsManager.recipes.push({
    name: 'xlsx',
    execute: _recipe2.default
  });

  reporter.options.tasks = reporter.options.tasks || {};
  reporter.options.tasks.allowedModules = reporter.options.tasks.allowedModules || [];
  if (reporter.options.tasks.allowedModules !== '*') {
    reporter.options.tasks.allowedModules.push('lodash');
    reporter.options.tasks.allowedModules.push(_path2.default.join(__dirname, '../node_modules/lodash'));
    reporter.options.tasks.allowedModules.push('xml2js');
    reporter.options.tasks.allowedModules.push(_path2.default.join(__dirname, '../node_modules/xml2js'));
  }

  reporter.documentStore.registerEntityType('XlsxTemplateType', {
    _id: { type: 'Edm.String', key: true },
    'shortid': { type: 'Edm.String' },
    'name': { type: 'Edm.String', publicKey: 'true' },
    'contentRaw': { type: 'Edm.Binary', document: { extension: 'xlsx' } },
    'content': { type: 'Edm.String', document: { extension: 'txt' } }
  });

  reporter.documentStore.registerEntitySet('xlsxTemplates', {
    entityType: 'jsreport.XlsxTemplateType',
    humanReadableKey: 'shortid',
    splitIntoDirectories: true
  });

  reporter.documentStore.registerComplexType('XlsxTemplateRefType', {
    'shortid': { type: 'Edm.String' }
  });

  reporter.initializeListeners.add('xlsxTemplates', function () {
    if (!reporter.documentStore.model.entityTypes['TemplateType']) {
      throw new Error('xlsx recipe depends on jsreport-templates ');
    }

    reporter.documentStore.model.entityTypes['TemplateType'].xlsxTemplate = { type: 'Collection(jsreport.XlsxTemplateRefType)' };

    reporter.documentStore.collection('xlsxTemplates').beforeInsertListeners.add('xlsxTemplates', function (doc) {
      doc.shortid = doc.shortid || _shortid2.default.generate();
      return (0, _serialize2.default)(doc.contentRaw, reporter.options.tempDirectory).then(function (serialized) {
        return doc.content = serialized;
      });
    });
  });

  reporter.beforeRenderListeners.insert({ after: 'data' }, 'xlsxTemplates', function (req) {
    if (req.template.recipe !== 'xlsx') {
      return;
    }

    var findTemplate = function findTemplate() {
      if (!req.template.xlsxTemplate || !req.template.xlsxTemplate.shortid) {
        if (defaultXlsxTemplate) {
          return defaultXlsxTemplate;
        }

        return FS.readFileAsync(_path2.default.join(__dirname, '../static', 'defaultXlsxTemplate.json')).then(function (content) {
          return JSON.parse(content);
        });
      }

      return reporter.documentStore.collection('xlsxTemplates').find({ shortid: req.template.xlsxTemplate.shortid }, req).then(function (docs) {
        if (!docs.length) {
          throw new Error('Unable to find xlsx template with shortid ' + req.template.xlsxTemplate.shortid);
        }

        return JSON.parse(docs[0].content);
      });
    };

    return findTemplate().then(function (t) {
      req.data = req.data || {};
      req.data.$xlsxTemplate = t;
      req.data.$xlsxModuleDirname = _path2.default.join(__dirname, '../');

      return FS.readFileAsync(_path2.default.join(__dirname, '../', 'static', 'helpers.js'), 'utf8').then(function (content) {
        return req.template.helpers = content + '\n' + (req.template.helpers || '');
      });
    });
  });
};